generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CATEGORY
// ==========================================
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products Product[]

  @@index([slug])
  @@map("categories")
}

// ==========================================
// PRODUCT
// ==========================================
model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String   @db.Text
  price         Decimal  @db.Decimal(10, 2)
  comparePrice  Decimal? @db.Decimal(10, 2)
  stockQuantity Int      @default(0)
  images        String[]
  isActive      Boolean  @default(true)
  featured      Boolean  @default(false)
  categoryId    String
  
  // Review aggregates (cached for performance)
  reviewCount   Int     @default(0)
  averageRating Decimal @default(0) @db.Decimal(2, 1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  category   Category    @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  wishlists  Wishlist[]
  reviews    Review[]

  @@index([categoryId])
  @@index([slug])
  @@index([isActive])
  @@index([featured])
  @@index([averageRating])
  @@map("products")
}

// ==========================================
// USER
// ==========================================
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  fullName     String
  phone        String?
  gender       Gender?   @default(OTHER)
  dateOfBirth  DateTime?
  avatar       String?
  role         Role      @default(CUSTOMER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  cartItems   CartItem[]
  orders      Order[]
  wishlists   Wishlist[]
  addresses   Address[]
  reviews     Review[]
  reviewVotes ReviewVote[]

  @@index([email])
  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  CUSTOMER
  ADMIN
}

// ==========================================
// ADDRESS
// ==========================================
model Address {
  id        String   @id @default(cuid())
  userId    String
  label     String   @default("Home")
  fullName  String
  phone     String
  address   String
  ward      String?
  district  String
  city      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([userId])
  @@index([isDefault])
  @@map("addresses")
}

// ==========================================
// CART
// ==========================================
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("cart_items")
}

// ==========================================
// ORDER
// ==========================================
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String?
  
  // Snapshot customer info
  customerName  String
  customerEmail String?
  customerPhone String
  
  // Snapshot shipping address
  shippingFullName String
  shippingPhone    String
  shippingAddress  String
  shippingWard     String?
  shippingDistrict String
  shippingCity     String
  
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  note        String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user      User?     @relation(fields: [userId], references: [id])
  addressId String?
  address   Address?  @relation(fields: [addressId], references: [id])
  couponId  String?
  coupon    Coupon?   @relation(fields: [couponId], references: [id])
  
  orderItems OrderItem[]
  payment    Payment?
  shipping   Shipping?
  reviews    Review[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPING
  DELIVERED
  COMPLETED
  CANCELLED
}

// ==========================================
// ORDER ITEM
// ==========================================
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

// ==========================================
// ADMIN
// ==========================================
model Admin {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  fullName     String
  email        String   @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([username])
  @@index([email])
  @@map("admins")
}

// ==========================================
// WISHLIST
// ==========================================
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlists")
}

// ==========================================
// COUPON
// ==========================================
model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType
  value       Decimal    @db.Decimal(10, 2)
  minOrder    Decimal?   @db.Decimal(10, 2)
  maxDiscount Decimal?   @db.Decimal(10, 2)
  validFrom   DateTime
  validTo     DateTime
  usageLimit  Int?
  usedCount   Int        @default(0)
  isActive    Boolean    @default(true)
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orders Order[]

  @@index([code])
  @@index([validFrom, validTo])
  @@index([isActive])
  @@map("coupons")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

// ==========================================
// PAYMENT
// ==========================================
model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  metadata      Json?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([transactionId])
  @@map("payments")
}

enum PaymentMethod {
  COD
  BANK_TRANSFER
  MOMO
  VNPAY
  ZALOPAY
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// ==========================================
// SHIPPING
// ==========================================
model Shipping {
  id            String         @id @default(cuid())
  orderId       String         @unique
  carrier       String
  trackingCode  String?
  fee           Decimal        @db.Decimal(10, 2)
  status        ShippingStatus @default(PREPARING)
  estimatedDate DateTime?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  notes         String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([trackingCode])
  @@map("shippings")
}

enum ShippingStatus {
  PREPARING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

// ==========================================
// REVIEW (NEW!)
// ==========================================
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  orderId   String? // Liên kết với đơn hàng (verify đã mua)
  rating    Int // 1-5 sao
  title     String? // Tiêu đề review (optional)
  comment   String? @db.Text
  images    String[] // Ảnh review từ khách
  
  // Moderation
  isVerified Boolean @default(false) // Badge "Đã mua hàng"
  isApproved Boolean @default(true) // Admin duyệt
  isPinned   Boolean @default(false) // Ghim review hay
  
  // Social
  helpfulCount   Int @default(0) // Cache số votes helpful
  unhelpfulCount Int @default(0) // Cache số votes unhelpful
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  order   Order?       @relation(fields: [orderId], references: [id])
  votes   ReviewVote[]

  @@index([productId])
  @@index([userId])
  @@index([orderId])
  @@index([rating])
  @@index([isApproved])
  @@index([isPinned])
  @@index([createdAt])
  @@map("reviews")
}

// ==========================================
// REVIEW VOTE (NEW!)
// ==========================================
model ReviewVote {
  id        String  @id @default(cuid())
  reviewId  String
  userId    String
  isHelpful Boolean // true = helpful, false = not helpful
  createdAt DateTime @default(now())
  
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId]) // 1 user chỉ vote 1 lần
  @@index([reviewId])
  @@index([userId])
  @@map("review_votes")
}