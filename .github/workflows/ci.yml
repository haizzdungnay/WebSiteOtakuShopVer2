name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type check
      run: npx tsc --noEmit
    
    - name: Run linter
      run: npm run lint --if-present
      continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Next.js application
      run: npm run build
      env:
        NODE_ENV: production
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: otakushop
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-secret-key
        JWT_EXPIRES_IN: 7d
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: npm audit --production
      continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Next.js Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: otakushop:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build PHP Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.php
        push: false
        tags: otakushop-php:test

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: otakushop
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Initialize database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d otakushop -f init.sql
      env:
        PGPASSWORD: postgres
    
    - name: Run integration tests
      run: echo "Integration tests would run here"
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: otakushop
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-secret-key

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan, docker-build, integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, docker-build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
